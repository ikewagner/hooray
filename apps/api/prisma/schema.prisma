// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String         @id @default(uuid())
  name                String?
  email               String         @unique
  passwordHash        String?        @map("password_hash")
  avatarUrl           String?        @map("avatar_url")
  createdAt           DateTime       @default(now()) @map("created_at")
  updatedAt           DateTime       @updatedAt @map("updated_at")
  Token               Token[]
  Account             Account[]
  Invite              Invite[]
  Member              Member[]
  Organization        Organization[]
  Compliment          Compliment[]
  receivedCompliments Compliment[]   @relation("Receiver")

  @@map("users")
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")

  @@map("tokens")
}

enum AccountProvider {
  GOOGLE
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")
  user              User            @relation(fields: [userId], references: [id])
  userId            String          @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

enum Role {
  ADMIN
  MEMBER
}

model Invite {
  id             String       @id @default(uuid())
  email          String
  role           Role
  createdAt      DateTime     @default(now()) @map("created_at")
  author         User?        @relation(fields: [userId], references: [id])
  userId         String?      @map("user_id")
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

model Member {
  id             String       @id @default(uuid())
  role           Role         @default(MEMBER)
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @map("user_id")

  @@unique([organizationId, userId])
  @@map("members")
}

model Organization {
  id                        String       @id @default(uuid())
  name                      String
  slug                      String       @unique
  domain                    String?      @unique
  shouldAttachUsersByDomain Boolean      @default(false) @map("should_attach_users_by_domain")
  avatarUrl                 String?      @map("avatar_url")
  createdAt                 DateTime     @default(now()) @map("created_at")
  updatedAt                 DateTime     @updatedAt @map("updated_at")
  owner                     User         @relation(fields: [ownerId], references: [id])
  ownerId                   String       @map("owner_id")
  invites                   Invite[]
  members                   Member[]
  compliments               Compliment[]

  @@map("organizations")
}

model Compliment {
  id             String        @id @default(uuid())
  title          String
  content        String
  createdAt      DateTime      @default(now()) @map("created_at")
  owner          User          @relation(fields: [ownerId], references: [id])
  ownerId        String        @map("owner_id")
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  receiver       User          @relation("Receiver", fields: [receiverId], references: [id])
  receiverId     String        @map("receiver_id")

  @@map("compliments")
}
